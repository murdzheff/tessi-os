name: build-ublue-custom-matrix
on:
  pull_request:
    branches:
      - main
  schedule:
    - cron: "05 10 * * *" # 10:05am UTC everyday
  push:
    branches:
      - main
    paths-ignore:
        - "**/README.md"
  workflow_dispatch:

env:
  MY_IMAGE_DESC: "My Customized Universal Blue Image"
  IMAGE_REGISTRY: "ghcr.io/${{ github.repository_owner }}" # do not edit

concurrency:
  group: ${{ github.workflow }}-${{ github.ref || github.run_id }}
  cancel-in-progress: true

jobs:
  build_push:
    name: Build and push image
    runs-on: ubuntu-24.04

    strategy:
      matrix:
        variant: # Matrix variable
          - kinno
          - cinna
          - blue # Add more variants as needed
        include:
          - variant: kinno
            MY_IMAGE_NAME: kinno-image
          - variant: cinna
            MY_IMAGE_NAME: cinna-image
          - variant: blue
            MY_IMAGE_NAME: blue-image

    permissions:
      contents: read
      packages: write
      id-token: write

    env:
      VARIANT: ${{ matrix.variant }}

    steps:
      - name: Checkout Push to Registry action
        uses: actions/checkout@v4

      - name: Maximize build space
        uses: ublue-os/remove-unwanted-software@v7

      - name: Generate tags
        id: generate-tags
        shell: bash
        run: |
          TIMESTAMP="$(date +%Y%m%d)"
          SHA_SHORT="${GITHUB_SHA::7}"

          TAGS=()
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            TAGS+=("pr-${{ github.event.number }}")
            TAGS+=("${SHA_SHORT}")
          else
            TAGS+=("${TIMESTAMP}")
            TAGS+=("latest")
          fi

          echo "Generated tags: ${TAGS[@]}"
          echo "tags=${TAGS[*]}" >> $GITHUB_OUTPUT

      - name: Image Metadata
        uses: docker/metadata-action@v5
        id: meta
        with:
          images: |
            ${{ env.MY_IMAGE_NAME }}
          labels: |
            io.artifacthub.package.readme-url=https://raw.githubusercontent.com/${{ github.repository }}/main/README.md
            org.opencontainers.image.description=${{ env.MY_IMAGE_DESC }}
            org.opencontainers.image.title=${{ env.MY_IMAGE_NAME }}

      - name: Build Image
        id: build_image
        uses: redhat-actions/buildah-build@v2
        with:
          containerfiles: |
            ./Containerfiles/${{ matrix.variant }}/Containerfile
          image: ${{ matrix.MY_IMAGE_NAME }}
          tags: |
            ${{ steps.generate-tags.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          oci: false

      - name: Lowercase Registry
        id: registry_case
        uses: ASzc/change-string-case-action@v6
        with:
          string: ${{ env.IMAGE_REGISTRY }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Push Image to GHCR
        uses: redhat-actions/push-to-registry@v2
        id: push
        with:
          image: ${{ steps.build_image.outputs.image }}
          tags: ${{ steps.build_image.outputs.tags }}
          registry: ${{ steps.registry_case.outputs.lowercase }}
          extra-args: |
            --compression-format=zstd

      - uses: sigstore/cosign-installer@v3.7.0
        if: github.event_name != 'pull_request'

      - name: Sign container image
        if: github.event_name != 'pull_request'
        run: |
          cosign sign -y --key env://COSIGN_PRIVATE_KEY ${{ steps.registry_case.outputs.lowercase }}/${{ steps.build_image.outputs.image }}@${{ steps.push.outputs.digest }}
        env:
          COSIGN_PRIVATE_KEY: ${{ secrets.SIGNING_SECRET }}
